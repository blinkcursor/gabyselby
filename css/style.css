@charset "UTF-8";
/* ==========================================================================
   BASE & THEME SETTINGS HERE
   ========================================================================== */
/* Theme colors
   ========================================================================== */
/* ==========================================================================
   Define default base colors which can be overwritten
   ========================================================================== */
/* Literal color names (base copied from material design palette)
   ========================================================================== */
/* Typography
   ========================================================================== */
body {
  font-family: "PT Serif", serif; }

/* UI tweaks
   ========================================================================== */
/* ==========================================================================
   INCLUDE FILES TO BUILD STYLE.CSS
   ========================================================================== */
/*!
 * inuitcss, by @csswizardry
 *
 * github.com/inuitcss | inuitcss.com
 */
/* ==========================================================================
   MATHS HELPERS
   ========================================================================== */
/* ==========================================================================
   FONT-SIZE MIXIN
   ========================================================================== */
/* ==========================================================================
   MEDIA-QUERY MIXING
   ========================================================================== */
/* ==========================================================================
   MIXIN TO GENERATE GRID SYSTEM WIDTH CLASSES
   ========================================================================== */
/* ==========================================================================
   TOOLS & MIXINS DEFINED FOR THIS PROJECT
   ========================================================================== */
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

/*------------------------------------*\
    #RESET
\*------------------------------------*/
/**
 * As well as using normalize.css, it is often advantageous to remove all
 * margins from certain elements.
 */
body,
h1, h2, h3, h4, h5, h6,
p, blockquote, pre,
dl, dd, ol, ul,
form, fieldset, legend,
figure,
table, th, td, caption,
hr {
  margin: 0;
  padding: 0; }

/**
 * Give a help cursor to elements that give extra info on `:hover`.
 */
abbr[title],
dfn[title] {
  cursor: help; }

/**
 * Remove underlines from potentially troublesome elements.
 */
u,
ins {
  text-decoration: none; }

/**
 * Apply faux underlines to inserted text via `border-bottom`.
 */
ins {
  border-bottom: 1px solid; }

/*------------------------------------*\
    #BOX-SIZING
\*------------------------------------*/
/**
 * Set the global `box-sizing` state to `border-box`.
 *
 * css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice
 * paulirish.com/2012/box-sizing-border-box-ftw
 */
html {
  box-sizing: border-box; }

*, *:before, *:after {
  box-sizing: inherit; }

/*------------------------------------*\
    #SHARED
\*------------------------------------*/
/**
 * Where `margin-bottom` is concerned,this value will be the same as the
 * base line-height. This allows us to keep a consistent vertical rhythm.
 * As per: csswizardry.com/2012/06/single-direction-margin-declarations
 */
h1, h2, h3, h4, h5, h6,
ul, ol, dl,
blockquote, p, address,
hr,
table,
fieldset, figure,
pre {
  margin-bottom: 24px;
  margin-bottom: 1.5rem; }

/**
 * Where `margin-left` is concerned we want to try and indent certain elements
 * by a consistent amount. Define that amount once,here.
 */
ul, ol, dd {
  margin-left: 48px;
  margin-left: 3rem; }

/*------------------------------------*\
    #PAGE
\*------------------------------------*/
/**
 * High-, page-level styling.
 *
 * 1. Set the default `font-size` and `line-height` for the entire project,
 *    sourced from our default variables. The `font-size` is calculated to exist
 *    in ems, the `line-height` is calculated to exist unitlessly.
 * 2. Force scrollbars to always be visible to prevent awkward ‘jumps’ when
 *    navigating between pages that do/do not have enough content to produce
 *    scrollbars naturally.
 * 3. Ensure the page always fills at least the entire height of the viewport.
 * 4. Prevent certain mobile browsers from automatically zooming fonts.
 * 5. Fonts on OSX will look more consistent with other systems that do not
 *    render text using sub-pixel anti-aliasing.
 */
html {
  font-size: 1em;
  /* [1] */
  line-height: 1.5;
  /* [1] */
  background-color: #ffffff;
  color: #303030;
  overflow-y: scroll;
  /* [2] */
  min-height: 100%;
  /* [3] */
  -webkit-text-size-adjust: 100%;
  /* [4] */
  -ms-text-size-adjust: 100%;
  /* [4] */
  -moz-osx-font-smoothing: grayscale;
  /* [5] */
  -webkit-font-smoothing: antialiased;
  /* [5] */ }

/* ==========================================================================
   SET HEADING SIZES and COMPLEMENTARY SIZE CLASSES
   ========================================================================== */
.tera {
  font-size: 96px;
  font-size: 6rem;
  line-height: 1; }

.giga {
  font-size: 80px;
  font-size: 5rem;
  line-height: 1.2; }

.mega {
  font-size: 64px;
  font-size: 4rem;
  line-height: 1.125; }

.kilo {
  font-size: 48px;
  font-size: 3rem;
  line-height: 1; }

h1, .alpha {
  font-size: 36px;
  font-size: 2.25rem;
  line-height: 1.3333333333; }

h2, .beta {
  font-size: 30px;
  font-size: 1.875rem;
  line-height: 1.6; }

h3, .gamma {
  font-size: 24px;
  font-size: 1.5rem;
  line-height: 1; }

h4, .delta {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2; }

h5, .epsilon {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5; }

h6, .zeta {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.7142857143; }

small, .milli {
  font-size: 12px;
  font-size: 0.75rem;
  line-height: 2; }

.micro {
  font-size: 10px;
  font-size: 0.625rem;
  line-height: 2.4; }

/* ==========================================================================
   DEFINE THE .LEDE CLASS FOR LARGER LEADING PARAGRAPHS
   ========================================================================== */
.lede {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.3333333333; }

/*------------------------------------*\
    #IMAGES
\*------------------------------------*/
/**
 * 1. Fluid images for responsive purposes.
 * 2. Offset `alt` text from surrounding copy.
 * 3. Setting `vertical-align` removes the whitespace that appears under `img`
 *    elements when they are dropped into a page as-is. Safer alternative to
 *    using `display: block;`.
 */
img {
  max-width: 100%;
  /* [1] */
  font-style: italic;
  /* [2] */
  vertical-align: middle;
  /* [3] */ }

/**
 * 1. Google Maps breaks if `max-width: 100%` acts upon it; use their selector
 *    to remove the effects.
 * 2. If a `width` and/or `height` attribute have been explicitly defined, let’s
 *    not make the image fluid.
 */
.gm-style img,
img[width],
img[height] {
  /* [2] */
  max-width: none; }

/* Object abstractions
   ========================================================================== */
/*------------------------------------*\
    #BLOCK
\*------------------------------------*/
/**
 * The block object simply stacks an image on top of some text-like content.
 */
/**
 * Stacked image-with-text object. A simple abstraction to cover a very commonly
 * occurring design pattern.
 */
.block {
  display: block; }

/**
 * 1. Eliminate whitespace around images.
 */
.block__img {
  vertical-align: middle;
  /* [1] */
  margin-bottom: 24px;
  /**
   * No space between the image and the text content.
   */
  /**
   * Tiny space between the image and the text content.
   */
  /**
   * Small space between the image and the text content.
   */
  /**
   * Large space between the image and the text content.
   */
  /**
   * Huge space between the image and the text content.
   */ }
  .block--flush > .block__img {
    margin-bottom: 0; }
  .block--tiny > .block__img {
    margin-bottom: 6px; }
  .block--small > .block__img {
    margin-bottom: 12px; }
  .block--large > .block__img {
    margin-bottom: 48px; }
  .block--huge > .block__img {
    margin-bottom: 96px; }

/**
 * Text-content.
 */
.block__body {
  display: block; }

/**
 * Right-aligned blocks.
 */
.block--right {
  text-align: right; }

/**
 * Center-aligned blocks.
 */
.block--center {
  text-align: center; }

/*------------------------------------*\
    #PANEL
\*------------------------------------*/
/**
 * The panel object simply boxes off content.
 */
/**
 * 1. apply .panel class to create block clearing block elements
 */
.panel {
  display: block;
  /* [1] */
  padding: 24px;
  position: relative; }
  .panel > :last-child {
    margin-bottom: 0; }

/**
 * Flush (i.e. no padding) panel.
 */
.panel--flush {
  padding: 0; }

/**
 * Tiny panel.
 */
.panel--tiny {
  padding: 6px; }

/**
 * Small panel.
 */
.panel--small {
  padding: 12px; }

/**
 * Large panel.
 */
.panel--large {
  padding: 48px; }

/**
 * Huge panel.
 */
.panel--huge {
  padding: 96px; }

/**
  * Change padding according to screen size
  */
.panel--responsive {
  padding: 6px; }
  @media screen and (min-width: 420px) {
    .panel--responsive {
      padding: 12px; } }
  @media screen and (min-width: 768px) {
    .panel--responsive {
      padding: 48px; } }
  @media screen and (min-width: 1024px) {
    .panel--responsive {
      padding: 96px; } }

body {
  overflow-x: hidden; }

.panel--wedge {
  background-color: #586c88; }

.panel--wedge::before {
  content: "";
  position: absolute;
  top: -40px;
  left: 0;
  height: 0;
  width: 0;
  border-top: 40px solid transparent;
  border-left: 1400px solid #586c88; }

.panel--wedge::after {
  content: "";
  position: absolute;
  bottom: -40px;
  left: 0;
  height: 0;
  width: 0;
  border-bottom: 40px solid transparent;
  border-left: 1400px solid #586c88; }

.panel--wedge__top {
  background-color: #586c88; }

.panel--wedge__top::before {
  content: "";
  position: absolute;
  top: -40px;
  left: 0;
  height: 0;
  width: 0;
  border-top: 40px solid transparent;
  border-left: 1400px solid #586c88; }

.panel--wedge__bottom {
  background-color: #586c88; }

.panel--wedge__bottom::before {
  content: "";
  position: absolute;
  top: -40px;
  left: 0;
  height: 0;
  width: 0;
  border-top: 40px solid transparent;
  border-left: 1400px solid #586c88; }

.panel--wedge__rev {
  background-color: #586c88; }

.panel--wedge__rev::before {
  content: "";
  position: absolute;
  top: -40px;
  right: 0;
  height: 0;
  width: 0;
  border-top: 40px solid transparent;
  border-right: 1400px solid #586c88; }

.panel--wedge__rev::after {
  content: "";
  position: absolute;
  bottom: -40px;
  right: 0;
  height: 0;
  width: 0;
  border-bottom: 40px solid transparent;
  border-right: 1400px solid #586c88; }

.panel--wedge__rev-top {
  background-color: #586c88; }

.panel--wedge__rev-top::before {
  content: "";
  position: absolute;
  top: -40px;
  right: 0;
  height: 0;
  width: 0;
  border-top: 40px solid transparent;
  border-right: 1400px solid #586c88; }

.panel--wedge__rev-bottom {
  background-color: #586c88; }

.panel--wedge__rev-bottom::after {
  content: "";
  position: absolute;
  bottom: -40px;
  right: 0;
  height: 0;
  width: 0;
  border-bottom: 40px solid transparent;
  border-right: 1400px solid #586c88; }

/*------------------------------------*\
    #MEDIA
\*------------------------------------*/
/**
 * Place any image- and text-like content side-by-side, as per:
 * stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code
 */
.media {
  display: block; }

.media__img {
  float: left;
  margin-right: 24px; }
  .media__img > img {
    display: block; }

.media__body {
  overflow: hidden;
  display: block; }
  .media__body,
  .media__body > :last-child {
    margin-bottom: 0; }

/*------------------------------------*\
    #FLAG
\*------------------------------------*/
/**
 * The flag object is a design pattern similar to the media object, however it
 * utilises `display: table[-cell];` to give us control over the vertical
 * alignments of the text and image. csswizardry.com/2013/05/the-flag-object
 */
/**
 * 1. Allows us to control vertical alignments
 * 2. Force the object to be the full width of its parent. Combined with [1],
 *    this makes the object behave in a quasi-`display: block;` manner.
 */
.flag {
  display: table;
  /* [1] */
  width: 100%;
  /* [2] */ }

/**
 * Items within a flag object. There should only ever be one of each.
 *
 * 1. Default to aligning content to their middles.
 */
.flag__img,
.flag__body {
  display: table-cell;
  vertical-align: middle;
  /* [1] */ }

/**
 * Flag images have a space between them and the body of the object.
 */
.flag__img {
  padding-right: 24px; }
  .flag__img > img {
    display: block;
    max-width: none; }

/**
 * The container for the main content of the flag object.
 *
 * 1. Forces the `.flag__body` to take up all remaining space.
 */
.flag__body {
  width: 100%;
  /* [1] */ }
  .flag__body,
  .flag__body > :last-child {
    margin-bottom: 0; }

/*------------------------------------*\
    $NAV
\*------------------------------------*/
/**
 * Nav abstraction as per: csswizardry.com/2011/09/the-nav-abstraction
 * When used on an `ol` or `ul`, this class throws the list into horizontal mode
 * e.g.:
 *
   <ul class=nav>
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 * Demo: jsfiddle.net/inuitcss/Vnph4
 *
 */
.nav {
  list-style: none;
  margin-left: 0; }
  .nav > li,
  .nav > li > a {
    display: inline-block;
    *display: inline;
    zoom: 1; }

/**
 * `.nav--stacked` extends `.nav` and throws the list into vertical mode, e.g.:
 *
   <ul class="nav  nav--stacked">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 */
.nav--stacked > li {
  display: list-item; }
  .nav--stacked > li > a {
    display: block; }

/**
 * `.nav--banner` extends `.nav` and centres the list, e.g.:
 *
   <ul class="nav  nav--banner">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 */
.nav--banner {
  text-align: center; }

/**
 * Give nav links a big, blocky hit area. Extends `.nav`, e.g.:
 *
   <ul class="nav  nav--block">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 */
.nav--block {
  line-height: 1;
  /**
   * Remove whitespace caused by `inline-block`.
   */
  letter-spacing: -0.31em;
  word-spacing: -0.43em;
  white-space: nowrap; }
  .nav--block > li {
    letter-spacing: normal;
    word-spacing: normal; }
    .nav--block > li > a {
      padding: 12px; }

/**
 * Force a nav to occupy 100% of the available width of its parent. Extends
 * `.nav`, e.g.:
 *
   <ul class="nav  nav--fit">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 * Thanks to @pimpl for this idea!
 */
.nav--fit {
  display: table;
  width: 100%; }
  .nav--fit > li {
    display: table-cell; }
    .nav--fit > li > a {
      display: block; }

/**
 * Make a list of keywords. Extends `.nav`, e.g.:
 *
   `<ul class="nav  nav--keywords>`
 *
 */
.nav--keywords > li:after {
  content: "\002C" "\00A0"; }
.nav--keywords > li:last-child:after {
  display: none; }

/*------------------------------------*\
    #TABS
\*------------------------------------*/
/**
 * A simple abstraction for making equal-width navigation tabs.
 */
/**
 * 1. Reset any residual styles (most likely from lists).
 * 2. Tables for layout!
 * 3. Force all `table-cell` children to have equal widths.
 * 4. Force the object to be the full width of its parent. Combined with [2],
 *    this makes the object behave in a quasi-`display: block;` manner.
 */
.tabs {
  margin: 0;
  /* [1] */
  padding: 0;
  /* [1] */
  list-style: none;
  /* [1] */
  display: table;
  /* [2] */
  table-layout: fixed;
  /* [3] */
  width: 100%;
  /* [4] */
  text-align: center; }

.tabs__item {
  display: table-cell;
  /* [2] */ }

.tabs__link {
  display: block; }

/*------------------------------------*\
    #LAYOUT
\*------------------------------------*/
/**
 * The inuitcss layout system uses `box-sizing: border-box;` and
 * `display: inline-block;` to create an extremely powerful, flexible
 * alternative to the traditional grid system. Combine the layout items with
 * the widths found in `trumps.widths`.
 */
/**
 * Begin a layout group.
 */
.layout {
  list-style: none;
  margin: 0;
  padding: 0;
  margin-left: -24px; }

/**
 * 1. Cause columns to stack side-by-side.
 * 2. Space columns apart.
 * 3. Align columns to the tops of each other.
 * 4. Full-width unless told to behave otherwise.
 * 5. Required to combine fluid widths and fixed gutters.
 */
.layout__item {
  display: inline-block;
  /* [1] */
  padding-left: 24px;
  /* [2] */
  vertical-align: top;
  /* [3] */
  width: 100%;
  /* [4] */ }

/**
 * Layouts with tiny gutters.
 */
.layout--tiny {
  margin-left: -6px; }
  .layout--tiny > .layout__item {
    padding-left: 6px; }

/**
 * Layouts with small gutters.
 */
.layout--small {
  margin-left: -12px; }
  .layout--small > .layout__item {
    padding-left: 12px; }

/**
 * Layouts with large gutters.
 */
.layout--large {
  margin-left: -48px; }
  .layout--large > .layout__item {
    padding-left: 48px; }

/**
 * Layouts with huge gutters.
 */
.layout--huge {
  margin-left: -96px; }
  .layout--huge > .layout__item {
    padding-left: 96px; }

/**
 * Layouts with no gutters.
 */
.layout--flush {
  margin-left: 0; }
  .layout--flush > .layout__item {
    padding-left: 0; }

/**
 * Reversed rendered order of layout items, e.g. items 1, 2, 3, 4 in your
 * markup will display in order 4, 3, 2, 1 on your page.
 */
.layout--rev {
  direction: rtl;
  text-align: left; }
  .layout--rev > .layout__item {
    direction: ltr;
    text-align: left; }

/**
 * Align layout items to the vertical centers of each other.
 */
.layout--middle > .layout__item {
  vertical-align: middle; }

/**
 * Align layout items to the vertical bottoms of each other.
 */
.layout--bottom > .layout__item {
  vertical-align: bottom; }

/**
 * Make the layout items fill up from the right hand side.
 */
.layout--right {
  text-align: right; }
  .layout--right > .layout__item {
    text-align: left; }

/**
 * Make the layout items fill up from the center outward.
 */
.layout--center {
  text-align: center; }
  .layout--center > .layout__item {
    text-align: left; }

/**
 * Cause layout items to take up a non-explicit amount of width.
 */
.layout--auto > .layout__item {
  width: auto; }

/*------------------------------------*\
    #WIDTHS
\*------------------------------------*/
/**
 * A series of width helper classes that you can use to size things like grid
 * systems. Classes can take a fraction-like format (e.g. `.u-2/3`) or a spoken-
 * word format (e.g. `.u-2-of-3`). Use these in your markup:
 *
 * <div class="u-7/12">
 */
.u-1\/1 {
  width: 100% !important; }

.u-1\/2 {
  width: 50% !important; }

.u-1\/3 {
  width: 33.3333333333% !important; }

.u-2\/3 {
  width: 66.6666666667% !important; }

.u-1\/4 {
  width: 25% !important; }

.u-2\/4 {
  width: 50% !important; }

.u-3\/4 {
  width: 75% !important; }

.u-1\/5 {
  width: 20% !important; }

.u-2\/5 {
  width: 40% !important; }

.u-3\/5 {
  width: 60% !important; }

.u-4\/5 {
  width: 80% !important; }

/*------------------------------------*\
    #WIDTHS-RESPONSIVE
\*------------------------------------*/
/**
 * Responsive width classes based on your responsive settings.
 */
@media screen and (max-width: 419px) {
  .u-1\/1-mq-xs {
    width: 100% !important; }

  .u-1\/2-mq-xs {
    width: 50% !important; }

  .u-1\/3-mq-xs {
    width: 33.3333333333% !important; }

  .u-2\/3-mq-xs {
    width: 66.6666666667% !important; }

  .u-1\/4-mq-xs {
    width: 25% !important; }

  .u-2\/4-mq-xs {
    width: 50% !important; }

  .u-3\/4-mq-xs {
    width: 75% !important; }

  .u-1\/5-mq-xs {
    width: 20% !important; }

  .u-2\/5-mq-xs {
    width: 40% !important; }

  .u-3\/5-mq-xs {
    width: 60% !important; }

  .u-4\/5-mq-xs {
    width: 80% !important; } }
@media screen and (max-width: 767px) {
  .u-1\/1-mq-sm {
    width: 100% !important; }

  .u-1\/2-mq-sm {
    width: 50% !important; }

  .u-1\/3-mq-sm {
    width: 33.3333333333% !important; }

  .u-2\/3-mq-sm {
    width: 66.6666666667% !important; }

  .u-1\/4-mq-sm {
    width: 25% !important; }

  .u-2\/4-mq-sm {
    width: 50% !important; }

  .u-3\/4-mq-sm {
    width: 75% !important; }

  .u-1\/5-mq-sm {
    width: 20% !important; }

  .u-2\/5-mq-sm {
    width: 40% !important; }

  .u-3\/5-mq-sm {
    width: 60% !important; }

  .u-4\/5-mq-sm {
    width: 80% !important; } }
@media screen and (max-width: 1023px) {
  .u-1\/1-mq-md {
    width: 100% !important; }

  .u-1\/2-mq-md {
    width: 50% !important; }

  .u-1\/3-mq-md {
    width: 33.3333333333% !important; }

  .u-2\/3-mq-md {
    width: 66.6666666667% !important; }

  .u-1\/4-mq-md {
    width: 25% !important; }

  .u-2\/4-mq-md {
    width: 50% !important; }

  .u-3\/4-mq-md {
    width: 75% !important; }

  .u-1\/5-mq-md {
    width: 20% !important; }

  .u-2\/5-mq-md {
    width: 40% !important; }

  .u-3\/5-mq-md {
    width: 60% !important; }

  .u-4\/5-mq-md {
    width: 80% !important; } }
@media screen and (max-width: 1259px) {
  .u-1\/1-mq-lg {
    width: 100% !important; }

  .u-1\/2-mq-lg {
    width: 50% !important; }

  .u-1\/3-mq-lg {
    width: 33.3333333333% !important; }

  .u-2\/3-mq-lg {
    width: 66.6666666667% !important; }

  .u-1\/4-mq-lg {
    width: 25% !important; }

  .u-2\/4-mq-lg {
    width: 50% !important; }

  .u-3\/4-mq-lg {
    width: 75% !important; }

  .u-1\/5-mq-lg {
    width: 20% !important; }

  .u-2\/5-mq-lg {
    width: 40% !important; }

  .u-3\/5-mq-lg {
    width: 60% !important; }

  .u-4\/5-mq-lg {
    width: 80% !important; } }
@media screen and (min-width: 1260px) {
  .u-1\/1-mq-xl {
    width: 100% !important; }

  .u-1\/2-mq-xl {
    width: 50% !important; }

  .u-1\/3-mq-xl {
    width: 33.3333333333% !important; }

  .u-2\/3-mq-xl {
    width: 66.6666666667% !important; }

  .u-1\/4-mq-xl {
    width: 25% !important; }

  .u-2\/4-mq-xl {
    width: 50% !important; }

  .u-3\/4-mq-xl {
    width: 75% !important; }

  .u-1\/5-mq-xl {
    width: 20% !important; }

  .u-2\/5-mq-xl {
    width: 40% !important; }

  .u-3\/5-mq-xl {
    width: 60% !important; }

  .u-4\/5-mq-xl {
    width: 80% !important; } }
@media screen and (min-width: 420px) {
  .u-1\/1-mq-sm-up {
    width: 100% !important; }

  .u-1\/2-mq-sm-up {
    width: 50% !important; }

  .u-1\/3-mq-sm-up {
    width: 33.3333333333% !important; }

  .u-2\/3-mq-sm-up {
    width: 66.6666666667% !important; }

  .u-1\/4-mq-sm-up {
    width: 25% !important; }

  .u-2\/4-mq-sm-up {
    width: 50% !important; }

  .u-3\/4-mq-sm-up {
    width: 75% !important; }

  .u-1\/5-mq-sm-up {
    width: 20% !important; }

  .u-2\/5-mq-sm-up {
    width: 40% !important; }

  .u-3\/5-mq-sm-up {
    width: 60% !important; }

  .u-4\/5-mq-sm-up {
    width: 80% !important; } }
@media screen and (min-width: 768px) {
  .u-1\/1-mq-md-up {
    width: 100% !important; }

  .u-1\/2-mq-md-up {
    width: 50% !important; }

  .u-1\/3-mq-md-up {
    width: 33.3333333333% !important; }

  .u-2\/3-mq-md-up {
    width: 66.6666666667% !important; }

  .u-1\/4-mq-md-up {
    width: 25% !important; }

  .u-2\/4-mq-md-up {
    width: 50% !important; }

  .u-3\/4-mq-md-up {
    width: 75% !important; }

  .u-1\/5-mq-md-up {
    width: 20% !important; }

  .u-2\/5-mq-md-up {
    width: 40% !important; }

  .u-3\/5-mq-md-up {
    width: 60% !important; }

  .u-4\/5-mq-md-up {
    width: 80% !important; } }
@media screen and (min-width: 1024px) {
  .u-1\/1-mq-lg-up {
    width: 100% !important; }

  .u-1\/2-mq-lg-up {
    width: 50% !important; }

  .u-1\/3-mq-lg-up {
    width: 33.3333333333% !important; }

  .u-2\/3-mq-lg-up {
    width: 66.6666666667% !important; }

  .u-1\/4-mq-lg-up {
    width: 25% !important; }

  .u-2\/4-mq-lg-up {
    width: 50% !important; }

  .u-3\/4-mq-lg-up {
    width: 75% !important; }

  .u-1\/5-mq-lg-up {
    width: 20% !important; }

  .u-2\/5-mq-lg-up {
    width: 40% !important; }

  .u-3\/5-mq-lg-up {
    width: 60% !important; }

  .u-4\/5-mq-lg-up {
    width: 80% !important; } }
@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
  .u-1\/1-retina {
    width: 100% !important; }

  .u-1\/2-retina {
    width: 50% !important; }

  .u-1\/3-retina {
    width: 33.3333333333% !important; }

  .u-2\/3-retina {
    width: 66.6666666667% !important; }

  .u-1\/4-retina {
    width: 25% !important; }

  .u-2\/4-retina {
    width: 50% !important; }

  .u-3\/4-retina {
    width: 75% !important; }

  .u-1\/5-retina {
    width: 20% !important; }

  .u-2\/5-retina {
    width: 40% !important; }

  .u-3\/5-retina {
    width: 60% !important; }

  .u-4\/5-retina {
    width: 80% !important; } }
/*------------------------------------*\
    #LISTS
\*------------------------------------*/
/**
 * Remove extra vertical spacing when nesting lists.
 */
li > ul,
li > ol {
  margin-bottom: 0; }

/*------------------------------------*\
    #LIST-BARE
\*------------------------------------*/
/**
 * The list-bare object simply removes any indents and bullet points from lists.
 */
.list-bare {
  margin: 0;
  padding: 0;
  list-style: none; }

/*------------------------------------*\
    #LIST-INLINE
\*------------------------------------*/
/**
 * The list-inline object simply displays a list of items in one line.
 */
.list-inline {
  margin: 0;
  padding: 0;
  list-style: none; }
  .list-inline > li {
    display: inline-block; }

/**
 * Comma delimited list to semantically mark up lists of tags, etc.
 *
 * N.B. This component requires that you remove the whitespace between LIs.
 *      The simplest (and valid) way to achieve this is by omitting the
 *      closing `</li>` tag.
 */
.list-inline--delimited > li + li:before {
  content: ", "; }

/*------------------------------------*\
    #LIST-BLOCK
\*------------------------------------*/
/**
 * The list-block object creates blocky list items out of a `ul` or `ol`.
 */
.list-block {
  margin: 0;
  padding: 0;
  list-style: none; }

.list-block__item,
.list-block > li {
  padding: 24px; }

/**
 * Tiny list-blocks.
 */
.list-block--tiny > .list-block__item,
.list-block.list-block--tiny > li {
  padding: 6px; }

/**
 * Small list-blocks.
 */
.list-block--small > .list-block__item,
.list-block.list-block--small > li {
  padding: 12px; }

/**
 * Large list-blocks.
 */
.list-block--large > .list-block__item,
.list-block.list-block--large > li {
  padding: 48px; }

/**
 * Huge list-blocks.
 */
.list-block--huge > .list-block__item,
.list-block.list-block--huge > li {
  padding: 96px; }

/*------------------------------------*\
    #LIST-UI
\*------------------------------------*/
/**
 * The UI list object creates blocky list items with a keyline separator out of
 * a `ul` or `ol`.
 */
.list-ui,
.list-ui__item,
.list-ui > li {
  border: 0 solid #303030; }

.list-ui {
  margin: 0;
  padding: 0;
  list-style: none;
  border-top-width: 1px; }

.list-ui__item,
.list-ui > li {
  padding: 24px;
  border-bottom-width: 1px; }

/**
 * Tiny list-uis.
 */
.list-ui--tiny > .list-ui__item,
.list-ui.list-ui--tiny > li {
  padding: 6px; }

/**
 * Small list-uis.
 */
.list-ui--small > .list-ui__item,
.list-ui.list-ui--small > li {
  padding: 12px; }

/**
 * Large list-uis.
 */
.list-ui--large > .list-ui__item,
.list-ui.list-ui--large > li {
  padding: 48px; }

/**
 * Huge list-uis.
 */
.list-ui--huge > .list-ui__item,
.list-ui.list-ui--huge > li {
  padding: 96px; }

/*------------------------------------*\
    #PACK
\*------------------------------------*/
/**
 * The pack object simply causes any number of elements pack up horizontally to
 * automatically fill an equal, fluid width of their parent.
 */
/**
 * 1. Fill all available space.
 * 2. Cause children to be automatically equally sized.
 */
.pack {
  width: 100%;
  /* [1] */
  display: table;
  table-layout: fixed;
  /* [2] */ }

/**
 * Cause children to adopt table-like structure.
 */
.pack__item {
  display: table-cell;
  /**
   * All items are aligned to the middles of each other.
   */
  /**
   * All items are aligned to the bottoms of each other.
   */ }
  .pack--middle > .pack__item {
    vertical-align: middle; }
  .pack--bottom > .pack__item {
    vertical-align: bottom; }

/**
 * Cause children to pack up into available space, but not equally sized.
 */
.pack--auto {
  table-layout: auto; }

/**
 * Tiny gutters between items.
 */
.pack--tiny {
  border-spacing: 6px; }

/**
 * Small gutters between items.
 */
.pack--small {
  border-spacing: 12px; }

/**
 * Large gutters between items.
 */
.pack--large {
  border-spacing: 48px; }

/**
 * Huge gutters between items.
 */
.pack--huge {
  border-spacing: 96px; }

/**
 * Reversed order packs.
 */
.pack--rev {
  direction: rtl; }
  .pack--rev > .pack__item {
    direction: ltr; }

/*------------------------------------*\
    #TABLES
\*------------------------------------*/
.table {
  width: 100%; }

/**
 * Force tables into having equal-width columns.
 */
.table--fixed {
  table-layout: fixed; }

/**
 * Tables with very tightly packed cells.
 */
.table--compact th,
.table--compact td {
  padding: 6px; }

/**
 * Lightly packed cells.
 */
.table--cosy th,
.table--cosy td {
  padding: 12px; }

/**
 * Tables with very widely padded cells.
 */
.table--comfy th,
.table--comfy td {
  padding: 24px; }

/**
 * Add borders around a `table`.
 */
.table--cells th,
.table--cells td {
  border: 1px solid #303030; }

/**
 * Add borders only to `table`’s rows.
 */
.table--rows,
.table--rows th,
.table--rows td {
  border: 0 solid #303030; }

.table--rows {
  border-top-width: 1px; }
  .table--rows th,
  .table--rows td {
    border-bottom-width: 1px; }

/**
 * Add borders only to `table`’s columns.
 */
.table--columns,
.table--columns th,
.table--columns td {
  border: 0 solid #303030; }

.table--columns {
  border-left-width: 1px; }
  .table--columns th,
  .table--columns td {
    border-right-width: 1px; }

/*------------------------------------*\
    #BUTTONS
\*------------------------------------*/
/**
 * A simple button object.
 */
/**
 * 1. Allow us to style box model properties.
 * 2. Line different sized buttons up a little nicer.
 * 3. Make buttons inherit font styles (often necessary when styling `input`s as
 *    buttons).
 * 4. Reset/normalize some styles.
 * 5. Force all button-styled elements to appear clickable.
 * 6. Fixes odd inner spacing in IE7.
 * 7. Subtract the border size from the padding value so that buttons do not
 *    grow larger as we add borders.
 */
.btn {
  display: inline-block;
  /* [1] */
  vertical-align: middle;
  /* [2] */
  font: inherit;
  /* [3] */
  text-align: center;
  /* [4] */
  margin: 0;
  /* [4] */
  cursor: pointer;
  /* [5] */
  overflow: visible;
  /* [6] */
  padding: 11px 23px;
  /* [7] */
  background-color: #607d8b;
  border: 1px solid #607d8b;
  border-radius: 2px; }
  .btn, .btn:hover, .btn:active, .btn:focus {
    text-decoration: none;
    /* [4] */
    color: #ffffff; }

/**
 * Fix a Firefox bug whereby `input type="submit"` gains 2px extra padding.
 */
.btn::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Small buttons.
 */
.btn--small {
  padding: 5px 11px;
  /* [7] */ }

/**
 * Large buttons.
 */
.btn--large {
  padding: 23px 47px;
  /* [7] */ }

/**
 * Full-width buttons.
 */
.btn--full {
  width: 100%; }

/**
 * Round-ended buttons.
 *
 * 1. Overly-large value to ensure the radius rounds the whole end of the
 *    button.
 */
.btn--pill {
  border-radius: 100px;
  /* [1] */ }

/*------------------------------------*\
    #BUTTONS
\*------------------------------------*/
.btn {
  -webkit-transition: 0.2s;
          transition: 0.2s;
  border-bottom-width: 2px;
  border-bottom-color: #41545e; }
  .btn:hover, .btn:active, .btn:focus {
    background-color: #41545e;
    border-color: #41545e;
    border-bottom-color: #212c31;
    color: white; }

.btn--inverse {
  background-color: #111111;
  border-color: #111111;
  border-bottom-color: #373737;
  color: #f4f4f4; }
  .btn--inverse:hover, .btn--inverse:active, .btn--inverse:focus {
    background-color: #373737;
    border-color: #373737;
    border-bottom-color: #5e5e5e; }

.btn--error {
  background-color: #f44336;
  border-color: #f44336;
  border-bottom-color: #d2190b;
  color: #ffffff; }
  .btn--error:hover, .btn--error:active, .btn--error:focus {
    background-color: #d2190b;
    border-color: #d2190b;
    border-bottom-color: #891008; }

.btn--success {
  background-color: #4caf50;
  border-color: #4caf50;
  border-bottom-color: #357a38;
  color: #ffffff; }
  .btn--success:hover, .btn--success:active, .btn--success:focus {
    background-color: #357a38;
    border-color: #357a38;
    border-bottom-color: #1e441f; }

.btn--warning {
  background-color: #ff9800;
  border-color: #ff9800;
  border-bottom-color: #b36a00;
  color: #ffffff; }
  .btn--warning:hover, .btn--warning:active, .btn--warning:focus {
    background-color: #b36a00;
    border-color: #b36a00;
    border-bottom-color: #663d00; }

.btn--info {
  background-color: #2196f3;
  border-color: #2196f3;
  border-bottom-color: #0a6ebd;
  color: #ffffff; }
  .btn--info:hover, .btn--info:active, .btn--info:focus {
    background-color: #0a6ebd;
    border-color: #0a6ebd;
    border-bottom-color: #064475; }

.btn--outline {
  background-color: transparent;
  color: #36474f; }
  .btn--outline:hover {
    background-color: #607d8b;
    border-color: #607d8b;
    border-bottom-color: #41545e;
    color: #ffffff; }

.btn--inverse.btn--outline {
  color: #111111; }
  .btn--inverse.btn--outline:hover {
    background-color: #111111;
    border-color: #111111;
    border-bottom-color: #373737;
    color: #ffffff; }

.btn--error.btn--outline {
  color: #f44336;
  border-bottom-color: #f22112; }
  .btn--error.btn--outline:hover {
    background-color: #f44336;
    border-color: #f44336;
    border-bottom-color: #d2190b;
    color: #ffffff; }

.btn--success.btn--outline {
  color: #4caf50;
  border-bottom-color: #409444; }
  .btn--success.btn--outline:hover {
    background-color: #4caf50;
    border-color: #4caf50;
    border-bottom-color: #357a38;
    color: #ffffff; }

.btn--warning.btn--outline {
  color: #ff9800;
  border-bottom-color: #d98100; }
  .btn--warning.btn--outline:hover {
    background-color: #ff9800;
    border-color: #ff9800;
    border-bottom-color: #b36a00;
    color: #ffffff; }

.btn--info.btn--outline {
  color: #2196f3;
  border-bottom-color: #0c83e2; }
  .btn--info.btn--outline:hover {
    background-color: #2196f3;
    border-color: #2196f3;
    border-bottom-color: #0a6ebd;
    color: #ffffff; }

/*------------------------------------*\
    #CORSET
\*------------------------------------*/
.corset {
  max-width: 88%;
  margin-left: auto;
  margin-right: auto; }
  @media screen and (max-width: 419px) {
    .corset {
      max-width: 90%;
      max-width: calc( 100% - 2rem ); } }
  @media screen and (min-width: 1024px) {
    .corset {
      max-width: 1000px; } }

.corset--snug {
  max-width: 72%; }
  @media screen and (min-width: 1024px) {
    .corset--snug {
      max-width: 800px; } }

.corset--loose {
  max-width: 96%; }
  @media screen and (min-width: 1024px) {
    .corset--loose {
      max-width: 1250px; } }

/*
// set max-width for container
// manually calculated from breakpoints

$corset-base: 	0.667;
$corset-snug: 	0.50;
$corset-loose:	0.80;

.corset {
	max-width: 100%; // default for smallest screens
	margin-left: auto;
	margin-right: auto;
	@include media-query(mq-sm-up) {
		max-width: round($corset-base * 768px);
	}
	@include media-query(mq-md-up) {
		max-width: round($corset-base * 1024px);
	}
	@include media-query(mq-lg-up) {
		max-width: round($corset-base * 1260px);
	}
}

.corset--snug {
	max-width: 100%; // default for smallest screens
	margin-left: auto;
	margin-right: auto;
	@include media-query(mq-sm-up) {
		max-width: round($corset-snug * 768px);
	}
	@include media-query(mq-md-up) {
		max-width: round($corset-snug * 1024px);
	}
	@include media-query(mq-lg-up) {
		max-width: round($corset-snug * 1260px);
	}
}

.corset--loose {
	max-width: 100%; // default for smallest screens
	margin-left: auto;
	margin-right: auto;
	@include media-query(mq-sm-up) {
		max-width: round($corset-loose * 768px);
	}
	@include media-query(mq-md-up) {
		max-width: round($corset-loose * 1024px);
	}
	@include media-query(mq-lg-up) {
		max-width: round($corset-loose * 1260px);
	}
}
*/
/*------------------------------------*\
    # NOTIFICATIONS
\*------------------------------------*/
.notification {
  display: block;
  width: 100%;
  padding: 12px;
  margin-bottom: 24px;
  border-left: 3px solid #607d8b;
  color: #212c31;
  background-color: #d0d0d0; }
  .notification.error {
    border-color: #f44336;
    color: #d2190b;
    background-color: #fde1df; }
  .notification.success {
    border-color: #4caf50;
    color: #357a38;
    background-color: #c7e7c8; }
  .notification.warning {
    border-color: #ff9800;
    color: #b36a00;
    background-color: #ffe0b3; }
  .notification.info {
    border-color: #2196f3;
    color: #0a6ebd;
    background-color: #cae6fc; }
  .notification.inverse {
    border-color: #6a6a6a;
    color: #f4f4f4;
    background-color: #111111; }
  .notification.empty {
    text-align: center;
    background-color: #f4f4f4;
    border: 1px dashed #d0d0d0; }
  .notification p:last-child {
    margin-bottom: 0; }

/* TRUMPS -- helper classes
   ========================================================================== */
/*------------------------------------*\
    #CLEARFIX
\*------------------------------------*/
/**
 * Micro clearfix, as per: css-101.org/articles/clearfix/latest-new-clearfix-so-far.php
 * Extend the clearfix class with Sass to avoid the `.clearfix` class appearing
 * over and over in your markup.
 */
.clearfix:after, .nav:after,
.panel:after,
.media:after,
.header:after {
  content: "";
  display: table;
  clear: both; }

/*------------------------------------*\
    #PRINT
\*------------------------------------*/
/**
 * Very crude, reset-like styles taken from the HTML5 Boilerplate:
 * https://github.com/h5bp/html5-boilerplate/blob/3c3c5e64604209a4d63e1e4c48dd245d45fadfd9/css/main.css#L200-L234
 */
@media print {
  *,
  *:before,
  *:after {
    background: transparent !important;
    color: #000 !important;
    /* Black prints faster: h5bp.com/s */
    box-shadow: none !important;
    text-shadow: none !important; }

  a,
  a:visited {
    text-decoration: underline; }

  a[href]:after {
    content: " (" attr(href) ")"; }

  abbr[title]:after {
    content: " (" attr(title) ")"; }

  /**
   * Don’t show links that are fragment identifiers, or use the `javascript:`
   * pseudo protocol.
   */
  a[href^="#"]:after,
  a[href^="javascript:"]:after {
    content: ""; } }
/*------------------------------------*\
    #ALIGNMENT HELPER CLASSES
\*------------------------------------*/
.right {
  float: right !important; }

.left {
  float: left !important; }

.text-right {
  text-align: right !important; }

.text-left {
  text-align: left !important; }

.text-center {
  text-align: center !important; }

/*------------------------------------*\
    #MISCELLANEOUS HELPER CLASSES
\*------------------------------------*/
a.inactive {
  cursor: default; }

span.nowrap {
  white-space: nowrap; }

/*------------------------------------*\
    #SPACING
\*------------------------------------*/
/**
 * Margin and padding helper classes. Use these to tweak layout on a micro
 * level.
 *
 * `.(m|p)(t|r|b|l|h|v)(-|+|0) {}` = margin/padding top/right/bottom/left/horizontal/vertical less/more/none
 */
/*------------------------------------*\
    #SPACING-RESPONSIVE
\*------------------------------------*/
/**
 * Margin and padding helper classes. Use these to tweak layout on a micro
 * level.
 *
 * `.(m|p)(t|r|b|l|h|v)(-|+|0) {}` = margin/padding top/right/bottom/left/horizontal/vertical less/more/none
 */
/* ==========================================================================
   USER -- working file of user-generated styling
   ========================================================================== */
/* THIS IS MY WORKING STYLESHEET, TO BE ORGANISED AS AND WHEN */
/* Style links
   ========================================================================== */
a, a:visited {
  text-decoration: none;
  color: #303030; }

a:hover {
  color: #586c88; }

/* Header & navigation & footer
   ========================================================================== */
.header {
  padding: 4rem 0 2rem; }

.header__logo {
  position: absolute; }
  @media screen and (max-width: 419px) {
    .header__logo {
      position: static;
      text-align: center; } }

.header__nav {
  display: block;
  text-align: right; }
  @media screen and (max-width: 419px) {
    .header__nav {
      text-align: center; } }
  @media screen and (min-width: 768px) {
    .header__nav {
      text-align: center; } }

@media screen and (max-width: 419px) {
  .nav > li {
    display: block; } }

@media screen and (min-width: 420px) {
  .nav--slashed > li:after {
    content: "\00A0" "\2215" "\00A0"; }
  .nav--slashed > li:last-child:after {
    content: ""; } }
footer {
  font-family: sans-serif;
  border-top: 2px dotted #9e9e9e;
  padding: 2rem 0; }

/* Cards
   ========================================================================== */
.card {
  margin-bottom: 2rem; }

.card__img {
  position: relative;
  width: 100%;
  height: 0;
  padding-bottom: 100%;
  overflow: hidden;
  -webkit-transition: all .2s ease-out;
          transition: all .2s ease-out; }

.card:hover .card__img {
  -webkit-transform: scale(1.05);
      -ms-transform: scale(1.05);
          transform: scale(1.05); }

/*
.card__img > a > img {
	max-width: none; //override inuit
	position: absolute;
	top: -9999px;
	right: -9999px;
	bottom: -9999px;
	left: -9999px;
	margin: auto;
}
.card__img--landscape {
	max-height: 100%;
}
.card__img--portrait {
	max-width: 100%;
}
*/
/*
.card__img--landscape {
  position: relative;
  max-height: 100%;
  left: 50%;
  transform: translateX(-50%);
}
.card__img--portrait {
  position: relative;
  max-width: 100%;
  top: 50%;
  transform: translateY(-50%);	
}
*/
.card__section {
  padding: 1rem 0; }

.card__section--center {
  text-align: center; }

/* Sub-section comment
   ========================================================================== */
.project {
  margin-bottom: 4rem;
  font-family: sans-serif; }

.project__img {
  margin-bottom: 2rem; }
